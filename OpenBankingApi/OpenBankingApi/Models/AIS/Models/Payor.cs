// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Klasa informacji o płatniku do ZUS i US / Tax Payor Information Class
    /// </summary>
    public partial class Payor
    {
        /// <summary>
        /// Initializes a new instance of the Payor class.
        /// </summary>
        public Payor()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Payor class.
        /// </summary>
        /// <param name="payorId">Identyfikator płatnika / Payor ID</param>
        /// <param name="payorIdType">Typ identyfikatora płatnika / Payor ID
        /// type. Possible values include: 'N', 'P', 'R', '1', '2', '3'</param>
        public Payor(string payorId = default(string), SenderIdType? payorIdType = default(SenderIdType?))
        {
            PayorId = payorId;
            PayorIdType = payorIdType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identyfikator płatnika / Payor ID
        /// </summary>
        [JsonProperty(PropertyName = "payorId")]
        public string PayorId { get; set; }

        /// <summary>
        /// Gets or sets typ identyfikatora płatnika / Payor ID type. Possible
        /// values include: 'N', 'P', 'R', '1', '2', '3'
        /// </summary>
        [JsonProperty(PropertyName = "payorIdType")]
        public SenderIdType? PayorIdType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (PayorId != null)
            {
                if (PayorId.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PayorId", 20);
                }
            }
        }
    }
}
