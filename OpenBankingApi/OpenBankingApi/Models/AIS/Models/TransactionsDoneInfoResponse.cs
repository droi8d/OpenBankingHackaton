// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.AIS.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Klasa odpowiedzi zawierająca listę transakcji done / Done Transaction
    /// Information Response Class
    /// </summary>
    public partial class TransactionsDoneInfoResponse
    {
        /// <summary>
        /// Initializes a new instance of the TransactionsDoneInfoResponse
        /// class.
        /// </summary>
        public TransactionsDoneInfoResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransactionsDoneInfoResponse
        /// class.
        /// </summary>
        public TransactionsDoneInfoResponse(ResponseHeader responseHeader, IList<TransactionInfo> transactions = default(IList<TransactionInfo>), PageInfo pageInfo = default(PageInfo))
        {
            ResponseHeader = responseHeader;
            Transactions = transactions;
            PageInfo = pageInfo;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responseHeader")]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactions")]
        public IList<TransactionInfo> Transactions { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pageInfo")]
        public PageInfo PageInfo { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResponseHeader == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResponseHeader");
            }
            if (Transactions != null)
            {
                foreach (var element in Transactions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
