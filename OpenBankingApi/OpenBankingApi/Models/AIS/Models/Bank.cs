// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Klasa zawierająca dane banku używana w żądaniach AIS / AIS Bank Data
    /// Class
    /// </summary>
    public partial class Bank : BankAccountInfo
    {
        /// <summary>
        /// Initializes a new instance of the Bank class.
        /// </summary>
        public Bank()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Bank class.
        /// </summary>
        /// <param name="bicOrSwift">Numer BIC/SWIFT Banku / BIC/SWIFT
        /// number</param>
        /// <param name="name">Nazwa Banku / Bank's name</param>
        /// <param name="code">Kod Banku, dla przelewów zagranicznych / Bank's
        /// code</param>
        /// <param name="countryCode">Kod kraju 3166-1 / Country code</param>
        public Bank(string bicOrSwift = default(string), string name = default(string), IList<string> address = default(IList<string>), string code = default(string), string countryCode = default(string))
            : base(bicOrSwift, name, address)
        {
            Code = code;
            CountryCode = countryCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets kod Banku, dla przelewów zagranicznych / Bank's code
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets kod kraju 3166-1 / Country code
        /// </summary>
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Code != null)
            {
                if (Code.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Code", 10);
                }
            }
            if (CountryCode != null)
            {
                if (CountryCode.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CountryCode", 3);
                }
            }
        }
    }
}
