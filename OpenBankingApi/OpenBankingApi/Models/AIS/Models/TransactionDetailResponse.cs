// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.AIS.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Klasa odpowiedzi na zapytanie o transakcję /  Transaction Detail
    /// Response Class
    /// </summary>
    public partial class TransactionDetailResponse
    {
        /// <summary>
        /// Initializes a new instance of the TransactionDetailResponse class.
        /// </summary>
        public TransactionDetailResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransactionDetailResponse class.
        /// </summary>
        /// <param name="currencyDate">Data kursu waluty,
        /// YYYY-MM-DDThh:mm:ss[.mmm] / Date of the currency exchange
        /// rate</param>
        /// <param name="baseCurrency">Waluta oryginalna transakcji, kod ISO /
        /// Currency of the transaction, ISO code</param>
        /// <param name="amountBaseCurrency">Kwota w oryginalnej walucie /
        /// Amount of the transaction</param>
        /// <param name="usedPaymentInstrumentId">Unikalny identyfikator
        /// instrumentu płatniczego, za którego pomocą wykonano transakcję /
        /// Payment Instrument ID</param>
        /// <param name="tppTransactionId">Unikalny identyfikator transakcji po
        /// stronie TPP / Transaction ID (TPP)</param>
        /// <param name="tppName">Nazwa TPP / TPP name</param>
        /// <param name="rejectionReason">Przyczyna odrzucenia / Reason for
        /// rejection</param>
        /// <param name="holdExpirationDate">Data ważności blokady</param>
        public TransactionDetailResponse(ResponseHeader responseHeader, TransactionInfo baseInfo, TransactionInfoZUS zusInfo = default(TransactionInfoZUS), TransactionInfoTax usInfo = default(TransactionInfoTax), TransactionInfoCard cardInfo = default(TransactionInfoCard), System.DateTime? currencyDate = default(System.DateTime?), IList<CurrencyRate> transactionRate = default(IList<CurrencyRate>), string baseCurrency = default(string), string amountBaseCurrency = default(string), string usedPaymentInstrumentId = default(string), string tppTransactionId = default(string), string tppName = default(string), string rejectionReason = default(string), string holdExpirationDate = default(string))
        {
            ResponseHeader = responseHeader;
            BaseInfo = baseInfo;
            ZusInfo = zusInfo;
            UsInfo = usInfo;
            CardInfo = cardInfo;
            CurrencyDate = currencyDate;
            TransactionRate = transactionRate;
            BaseCurrency = baseCurrency;
            AmountBaseCurrency = amountBaseCurrency;
            UsedPaymentInstrumentId = usedPaymentInstrumentId;
            TppTransactionId = tppTransactionId;
            TppName = tppName;
            RejectionReason = rejectionReason;
            HoldExpirationDate = holdExpirationDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "responseHeader")]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "baseInfo")]
        public TransactionInfo BaseInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "zusInfo")]
        public TransactionInfoZUS ZusInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "usInfo")]
        public TransactionInfoTax UsInfo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "cardInfo")]
        public TransactionInfoCard CardInfo { get; set; }

        /// <summary>
        /// Gets or sets data kursu waluty, YYYY-MM-DDThh:mm:ss[.mmm] / Date of
        /// the currency exchange rate
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "currencyDate")]
        public System.DateTime? CurrencyDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transactionRate")]
        public IList<CurrencyRate> TransactionRate { get; set; }

        /// <summary>
        /// Gets or sets waluta oryginalna transakcji, kod ISO / Currency of
        /// the transaction, ISO code
        /// </summary>
        [JsonProperty(PropertyName = "baseCurrency")]
        public string BaseCurrency { get; set; }

        /// <summary>
        /// Gets or sets kwota w oryginalnej walucie / Amount of the
        /// transaction
        /// </summary>
        [JsonProperty(PropertyName = "amountBaseCurrency")]
        public string AmountBaseCurrency { get; set; }

        /// <summary>
        /// Gets or sets unikalny identyfikator instrumentu płatniczego, za
        /// którego pomocą wykonano transakcję / Payment Instrument ID
        /// </summary>
        [JsonProperty(PropertyName = "usedPaymentInstrumentId")]
        public string UsedPaymentInstrumentId { get; set; }

        /// <summary>
        /// Gets or sets unikalny identyfikator transakcji po stronie TPP /
        /// Transaction ID (TPP)
        /// </summary>
        [JsonProperty(PropertyName = "tppTransactionId")]
        public string TppTransactionId { get; set; }

        /// <summary>
        /// Gets or sets nazwa TPP / TPP name
        /// </summary>
        [JsonProperty(PropertyName = "tppName")]
        public string TppName { get; set; }

        /// <summary>
        /// Gets or sets przyczyna odrzucenia / Reason for rejection
        /// </summary>
        [JsonProperty(PropertyName = "rejectionReason")]
        public string RejectionReason { get; set; }

        /// <summary>
        /// Gets or sets data ważności blokady
        /// </summary>
        [JsonProperty(PropertyName = "holdExpirationDate")]
        public string HoldExpirationDate { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResponseHeader == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResponseHeader");
            }
            if (BaseInfo == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BaseInfo");
            }
            if (BaseInfo != null)
            {
                BaseInfo.Validate();
            }
            if (ZusInfo != null)
            {
                ZusInfo.Validate();
            }
            if (UsInfo != null)
            {
                UsInfo.Validate();
            }
            if (TransactionRate != null)
            {
                foreach (var element in TransactionRate)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (BaseCurrency != null)
            {
                if (BaseCurrency.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "BaseCurrency", 3);
                }
            }
            if (AmountBaseCurrency != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(AmountBaseCurrency, "^\\d*\\.\\d{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "AmountBaseCurrency", "^\\d*\\.\\d{2}$");
                }
            }
            if (UsedPaymentInstrumentId != null)
            {
                if (UsedPaymentInstrumentId.Length > 32)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UsedPaymentInstrumentId", 32);
                }
            }
            if (TppTransactionId != null)
            {
                if (TppTransactionId.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TppTransactionId", 64);
                }
            }
            if (TppName != null)
            {
                if (TppName.Length > 32)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TppName", 32);
                }
            }
            if (RejectionReason != null)
            {
                if (RejectionReason.Length > 140)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RejectionReason", 140);
                }
            }
        }
    }
}
