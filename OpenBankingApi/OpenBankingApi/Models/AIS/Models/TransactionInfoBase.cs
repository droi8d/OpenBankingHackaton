// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Klasa bazowa informacji o transakcji / Transaction Information Base
    /// Class
    /// </summary>
    public partial class TransactionInfoBase
    {
        /// <summary>
        /// Initializes a new instance of the TransactionInfoBase class.
        /// </summary>
        public TransactionInfoBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransactionInfoBase class.
        /// </summary>
        /// <param name="transactionId">ID transakcji nadany przez ASPSP /
        /// Transaction ID (ASPSP)</param>
        /// <param name="amount">Kwota transakcji / Amount of the
        /// transaction</param>
        /// <param name="description">Tytuł transakcji / Description of the
        /// transaction</param>
        /// <param name="transactionType">Typ transakcji / Transaction
        /// type</param>
        /// <param name="currency">Kod ISO waluty transakcji / Currency
        /// (ISO)</param>
        /// <param name="tradeDate">Data operacji, YYYY-MM-DDThh:mm:ss[.mmm] /
        /// Date of the operation</param>
        public TransactionInfoBase(string transactionId, string amount, string description, string transactionType, string currency = default(string), System.DateTime? tradeDate = default(System.DateTime?), IDictionary<string, string> auxData = default(IDictionary<string, string>))
        {
            TransactionId = transactionId;
            Amount = amount;
            Currency = currency;
            Description = description;
            TransactionType = transactionType;
            TradeDate = tradeDate;
            AuxData = auxData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ID transakcji nadany przez ASPSP / Transaction ID
        /// (ASPSP)
        /// </summary>
        [JsonProperty(PropertyName = "transactionId")]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or sets kwota transakcji / Amount of the transaction
        /// </summary>
        [JsonProperty(PropertyName = "amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or sets kod ISO waluty transakcji / Currency (ISO)
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or sets tytuł transakcji / Description of the transaction
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets typ transakcji / Transaction type
        /// </summary>
        [JsonProperty(PropertyName = "transactionType")]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or sets data operacji, YYYY-MM-DDThh:mm:ss[.mmm] / Date of the
        /// operation
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "tradeDate")]
        public System.DateTime? TradeDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "auxData")]
        public IDictionary<string, string> AuxData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TransactionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransactionId");
            }
            if (Amount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Amount");
            }
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (TransactionType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransactionType");
            }
            if (TransactionId != null)
            {
                if (TransactionId.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TransactionId", 64);
                }
            }
            if (Amount != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Amount, "^\\d*\\.\\d{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Amount", "^\\d*\\.\\d{2}$");
                }
            }
            if (Currency != null)
            {
                if (Currency.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Currency", 3);
                }
            }
            if (Description != null)
            {
                if (Description.Length > 140)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 140);
                }
            }
            if (TransactionType != null)
            {
                if (TransactionType.Length > 100)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TransactionType", 100);
                }
            }
        }
    }
}
