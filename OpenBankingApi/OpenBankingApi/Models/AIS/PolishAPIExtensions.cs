// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolishAPI.
    /// </summary>
    public static partial class PolishAPIExtensions
    {
            /// <summary>
            /// Removes consent
            /// </summary>
            /// <remarks>
            /// Removes consent
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteConsentRequest'>
            /// Data for delete Consent Request
            /// </param>
            public static Error DeleteConsent(this IPolishAPI operations, DeleteConsentRequest deleteConsentRequest)
            {
                return operations.DeleteConsentAsync(deleteConsentRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes consent
            /// </summary>
            /// <remarks>
            /// Removes consent
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='deleteConsentRequest'>
            /// Data for delete Consent Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Error> DeleteConsentAsync(this IPolishAPI operations, DeleteConsentRequest deleteConsentRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteConsentWithHttpMessagesAsync(deleteConsentRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get information about all user's payment account
            /// </summary>
            /// <remarks>
            /// User identification based on access token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getAccountsRequest'>
            /// Data for Accounts Request
            /// </param>
            public static object GetAccounts(this IPolishAPI operations, AccountsRequest getAccountsRequest)
            {
                return operations.GetAccountsAsync(getAccountsRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get information about all user's payment account
            /// </summary>
            /// <remarks>
            /// User identification based on access token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getAccountsRequest'>
            /// Data for Accounts Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccountsAsync(this IPolishAPI operations, AccountsRequest getAccountsRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccountsWithHttpMessagesAsync(getAccountsRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get detailed information about user payment account
            /// </summary>
            /// <remarks>
            /// User identification based on access token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getAccountRequest'>
            /// Data for Account Request
            /// </param>
            public static object GetAccount(this IPolishAPI operations, AccountInfoRequest getAccountRequest)
            {
                return operations.GetAccountAsync(getAccountRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get detailed information about user payment account
            /// </summary>
            /// <remarks>
            /// User identification based on access token
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getAccountRequest'>
            /// Data for Account Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetAccountAsync(this IPolishAPI operations, AccountInfoRequest getAccountRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAccountWithHttpMessagesAsync(getAccountRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of user done transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getTransactionsDoneRequest'>
            /// Data for Transactions Done Request
            /// </param>
            public static object GetTransactionsDone(this IPolishAPI operations, TransactionInfoRequest getTransactionsDoneRequest)
            {
                return operations.GetTransactionsDoneAsync(getTransactionsDoneRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of user done transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getTransactionsDoneRequest'>
            /// Data for Transactions Done Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTransactionsDoneAsync(this IPolishAPI operations, TransactionInfoRequest getTransactionsDoneRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsDoneWithHttpMessagesAsync(getTransactionsDoneRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of user's rejected transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getTransactionsRejectedRequest'>
            /// Data for Transactions Rejected Request
            /// </param>
            public static object GetTransactionsRejected(this IPolishAPI operations, TransactionInfoRequest getTransactionsRejectedRequest)
            {
                return operations.GetTransactionsRejectedAsync(getTransactionsRejectedRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of user's rejected transactions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getTransactionsRejectedRequest'>
            /// Data for Transactions Rejected Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTransactionsRejectedAsync(this IPolishAPI operations, TransactionInfoRequest getTransactionsRejectedRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionsRejectedWithHttpMessagesAsync(getTransactionsRejectedRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get list of user's holded operations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getHoldsRequest'>
            /// Data for hold Request
            /// </param>
            public static object GetHolds(this IPolishAPI operations, TransactionHoldRequest getHoldsRequest)
            {
                return operations.GetHoldsAsync(getHoldsRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of user's holded operations
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getHoldsRequest'>
            /// Data for hold Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHoldsAsync(this IPolishAPI operations, TransactionHoldRequest getHoldsRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHoldsWithHttpMessagesAsync(getHoldsRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get detailed information about user's single transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getTransationDetailRequest'>
            /// Data for transation detail Request
            /// </param>
            public static object GetTransactionDetail(this IPolishAPI operations, TransactionDetailRequest getTransationDetailRequest)
            {
                return operations.GetTransactionDetailAsync(getTransationDetailRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get detailed information about user's single transaction
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='getTransationDetailRequest'>
            /// Data for transation detail Request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetTransactionDetailAsync(this IPolishAPI operations, TransactionDetailRequest getTransationDetailRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTransactionDetailWithHttpMessagesAsync(getTransationDetailRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
