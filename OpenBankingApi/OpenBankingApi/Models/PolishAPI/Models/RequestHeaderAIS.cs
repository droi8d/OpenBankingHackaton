// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Klasa zawierająca informacje o PSU and callback URL / PSU and callback
    /// URL Information Class
    /// </summary>
    public partial class RequestHeaderAIS : RequestHeaderWithoutToken
    {
        /// <summary>
        /// Initializes a new instance of the RequestHeaderAIS class.
        /// </summary>
        public RequestHeaderAIS()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RequestHeaderAIS class.
        /// </summary>
        /// <param name="token">Token autoryzacyjny / Authorization
        /// token</param>
        /// <param name="requestId">Identyfikator żądania / Request ID</param>
        /// <param name="userAgent">Browser agent dla PSU / PSU browser
        /// agent</param>
        /// <param name="ipAddress">IP adres / IP address</param>
        /// <param name="sendDate">Oryginalna data wysłania, format:
        /// 2017-11-24T14:13:05.424Z / Send date</param>
        /// <param name="tppId">Identyfikator TPP / TPP ID</param>
        /// <param name="isDirectPsu">Znacznik informujący czy request jest
        /// przesłany bezpośrednio przez PSU / Is request sent by PSU
        /// directly</param>
        public RequestHeaderAIS(string token, string requestId = default(string), string userAgent = default(string), string ipAddress = default(string), string sendDate = default(string), string tppId = default(string), bool? isDirectPsu = default(bool?))
            : base(requestId, userAgent, ipAddress, sendDate, tppId)
        {
            Token = token;
            IsDirectPsu = isDirectPsu;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets token autoryzacyjny / Authorization token
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets znacznik informujący czy request jest przesłany
        /// bezpośrednio przez PSU / Is request sent by PSU directly
        /// </summary>
        [JsonProperty(PropertyName = "isDirectPsu")]
        public bool? IsDirectPsu { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Token == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Token");
            }
        }
    }
}
