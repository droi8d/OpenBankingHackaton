// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Bazowa klasa dla zapytań o transakcje / Transaction Information Request
    /// Base Class
    /// </summary>
    public partial class TransactionInfoRequestBase
    {
        /// <summary>
        /// Initializes a new instance of the TransactionInfoRequestBase class.
        /// </summary>
        public TransactionInfoRequestBase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransactionInfoRequestBase class.
        /// </summary>
        /// <param name="accountNumber">Numer rachunku / Account number</param>
        /// <param name="transactionIdFrom">Element filtru: transacje od
        /// podanego identyfikatora transakcji / Filter element</param>
        /// <param name="transactionDateFrom">Element filtru: data transakcji
        /// od, YYYY-MM-DD / Filter element</param>
        /// <param name="transactionDateTo">Element filtru: data transakcji do,
        /// YYYY-MM-DD / Filter element</param>
        /// <param name="bookingDateFrom">Element filtru: data księgowania od,
        /// YYYY-MM-DD / Filter element</param>
        /// <param name="bookingDateTo">Element filtru: data księgowania do,
        /// YYYY-MM-DD / Filter element</param>
        /// <param name="minAmount">Element filtru: kwota od / Filter
        /// element</param>
        /// <param name="maxAmount">Element filtru: kwota do / Filter
        /// element</param>
        /// <param name="pageId">Używane w celu stronicowania danych: numer
        /// transakcji rozpoczynający stronę / Transaction number beginning the
        /// page (paging info)</param>
        /// <param name="perPage">Używane w celu stronicowania danych: wielkość
        /// strony danych / Page size (paging info)</param>
        public TransactionInfoRequestBase(RequestHeaderAIS requestHeader = default(RequestHeaderAIS), string accountNumber = default(string), string transactionIdFrom = default(string), System.DateTime? transactionDateFrom = default(System.DateTime?), System.DateTime? transactionDateTo = default(System.DateTime?), System.DateTime? bookingDateFrom = default(System.DateTime?), System.DateTime? bookingDateTo = default(System.DateTime?), string minAmount = default(string), string maxAmount = default(string), string pageId = default(string), double? perPage = default(double?))
        {
            RequestHeader = requestHeader;
            AccountNumber = accountNumber;
            TransactionIdFrom = transactionIdFrom;
            TransactionDateFrom = transactionDateFrom;
            TransactionDateTo = transactionDateTo;
            BookingDateFrom = bookingDateFrom;
            BookingDateTo = bookingDateTo;
            MinAmount = minAmount;
            MaxAmount = maxAmount;
            PageId = pageId;
            PerPage = perPage;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestHeader")]
        public RequestHeaderAIS RequestHeader { get; set; }

        /// <summary>
        /// Gets or sets numer rachunku / Account number
        /// </summary>
        [JsonProperty(PropertyName = "accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets element filtru: transacje od podanego identyfikatora
        /// transakcji / Filter element
        /// </summary>
        [JsonProperty(PropertyName = "transactionIdFrom")]
        public string TransactionIdFrom { get; set; }

        /// <summary>
        /// Gets or sets element filtru: data transakcji od, YYYY-MM-DD /
        /// Filter element
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "transactionDateFrom")]
        public System.DateTime? TransactionDateFrom { get; set; }

        /// <summary>
        /// Gets or sets element filtru: data transakcji do, YYYY-MM-DD /
        /// Filter element
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "transactionDateTo")]
        public System.DateTime? TransactionDateTo { get; set; }

        /// <summary>
        /// Gets or sets element filtru: data księgowania od, YYYY-MM-DD /
        /// Filter element
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "bookingDateFrom")]
        public System.DateTime? BookingDateFrom { get; set; }

        /// <summary>
        /// Gets or sets element filtru: data księgowania do, YYYY-MM-DD /
        /// Filter element
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "bookingDateTo")]
        public System.DateTime? BookingDateTo { get; set; }

        /// <summary>
        /// Gets or sets element filtru: kwota od / Filter element
        /// </summary>
        [JsonProperty(PropertyName = "minAmount")]
        public string MinAmount { get; set; }

        /// <summary>
        /// Gets or sets element filtru: kwota do / Filter element
        /// </summary>
        [JsonProperty(PropertyName = "maxAmount")]
        public string MaxAmount { get; set; }

        /// <summary>
        /// Gets or sets używane w celu stronicowania danych: numer transakcji
        /// rozpoczynający stronę / Transaction number beginning the page
        /// (paging info)
        /// </summary>
        [JsonProperty(PropertyName = "pageId")]
        public string PageId { get; set; }

        /// <summary>
        /// Gets or sets używane w celu stronicowania danych: wielkość strony
        /// danych / Page size (paging info)
        /// </summary>
        [JsonProperty(PropertyName = "perPage")]
        public double? PerPage { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RequestHeader != null)
            {
                RequestHeader.Validate();
            }
            if (TransactionIdFrom != null)
            {
                if (TransactionIdFrom.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TransactionIdFrom", 64);
                }
            }
            if (MinAmount != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(MinAmount, "^\\d*\\.\\d{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "MinAmount", "^\\d*\\.\\d{2}$");
                }
            }
            if (MaxAmount != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(MaxAmount, "^\\d*\\.\\d{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "MaxAmount", "^\\d*\\.\\d{2}$");
                }
            }
        }
    }
}
