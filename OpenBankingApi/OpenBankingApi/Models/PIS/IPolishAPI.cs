// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.PIS
{
    using Microsoft.Rest;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Interface specification for services provided by third parties based on
    /// access to payment accounts. Prepared by the Polish Bank Association and
    /// its affiliates
    /// </summary>
    public partial interface IPolishAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Detached JWS signature of the body of the payload
        /// </summary>
        string XJWSSIGNATURE { get; set; }


        /// <summary>
        /// Initiate domestic transfer
        /// </summary>
        /// <param name='domesticRequest'>
        /// Data for domestic transfer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,DomesticHeaders>> DomesticWithHttpMessagesAsync(PaymentDomesticRequest domesticRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate SEPA foreign transfers
        /// </summary>
        /// <param name='eEARequest'>
        /// Data for SEPA foreign transfer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,EEAHeaders>> EEAWithHttpMessagesAsync(PaymentEEARequest eEARequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate non SEPA foreign transfers
        /// </summary>
        /// <param name='nonEEARequest'>
        /// Data for non SEPA foreign transfer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,NonEEAHeaders>> NonEEAWithHttpMessagesAsync(PaymentNonEEARequest nonEEARequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Initiate tax transfer
        /// </summary>
        /// <param name='taxRequest'>
        /// Data for tax transfer
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,TaxHeaders>> TaxWithHttpMessagesAsync(PaymentTaxRequest taxRequest, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get the status of payment
        /// </summary>
        /// <param name='payment'>
        /// Payment ID
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        Task<HttpOperationResponse<object,GetPaymentHeaders>> GetPaymentWithHttpMessagesAsync(PaymentRequest payment, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));

    }
}
