// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.PIS
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PolishAPI.
    /// </summary>
    public static partial class PolishAPIExtensions
    {
            /// <summary>
            /// Initiate domestic transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domesticRequest'>
            /// Data for domestic transfer
            /// </param>
            public static object Domestic(this IPolishAPI operations, PaymentDomesticRequest domesticRequest)
            {
                return operations.DomesticAsync(domesticRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiate domestic transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='domesticRequest'>
            /// Data for domestic transfer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DomesticAsync(this IPolishAPI operations, PaymentDomesticRequest domesticRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DomesticWithHttpMessagesAsync(domesticRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiate SEPA foreign transfers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eEARequest'>
            /// Data for SEPA foreign transfer
            /// </param>
            public static object EEA(this IPolishAPI operations, PaymentEEARequest eEARequest)
            {
                return operations.EEAAsync(eEARequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiate SEPA foreign transfers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='eEARequest'>
            /// Data for SEPA foreign transfer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EEAAsync(this IPolishAPI operations, PaymentEEARequest eEARequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EEAWithHttpMessagesAsync(eEARequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiate non SEPA foreign transfers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nonEEARequest'>
            /// Data for non SEPA foreign transfer
            /// </param>
            public static object NonEEA(this IPolishAPI operations, PaymentNonEEARequest nonEEARequest)
            {
                return operations.NonEEAAsync(nonEEARequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiate non SEPA foreign transfers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nonEEARequest'>
            /// Data for non SEPA foreign transfer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> NonEEAAsync(this IPolishAPI operations, PaymentNonEEARequest nonEEARequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.NonEEAWithHttpMessagesAsync(nonEEARequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Initiate tax transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taxRequest'>
            /// Data for tax transfer
            /// </param>
            public static object Tax(this IPolishAPI operations, PaymentTaxRequest taxRequest)
            {
                return operations.TaxAsync(taxRequest).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Initiate tax transfer
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='taxRequest'>
            /// Data for tax transfer
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> TaxAsync(this IPolishAPI operations, PaymentTaxRequest taxRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.TaxWithHttpMessagesAsync(taxRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the status of payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payment'>
            /// Payment ID
            /// </param>
            public static object GetPayment(this IPolishAPI operations, PaymentRequest payment)
            {
                return operations.GetPaymentAsync(payment).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the status of payment
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='payment'>
            /// Payment ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPaymentAsync(this IPolishAPI operations, PaymentRequest payment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPaymentWithHttpMessagesAsync(payment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
