// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.PIS
{
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for SenderIdType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum SenderIdType
    {
        /// <summary>
        /// NIP
        /// </summary>
        [EnumMember(Value = "N")]
        N,
        /// <summary>
        /// Pesel
        /// </summary>
        [EnumMember(Value = "P")]
        P,
        /// <summary>
        /// Regon
        /// </summary>
        [EnumMember(Value = "R")]
        R,
        /// <summary>
        /// Dow√≥d osobisty
        /// </summary>
        [EnumMember(Value = "1")]
        One,
        /// <summary>
        /// Paszport
        /// </summary>
        [EnumMember(Value = "2")]
        Two,
        /// <summary>
        /// Inny
        /// </summary>
        [EnumMember(Value = "3")]
        Three
    }
    internal static class SenderIdTypeEnumExtension
    {
        internal static string ToSerializedValue(this SenderIdType? value)
        {
            return value == null ? null : ((SenderIdType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this SenderIdType value)
        {
            switch( value )
            {
                case SenderIdType.N:
                    return "N";
                case SenderIdType.P:
                    return "P";
                case SenderIdType.R:
                    return "R";
                case SenderIdType.One:
                    return "1";
                case SenderIdType.Two:
                    return "2";
                case SenderIdType.Three:
                    return "3";
            }
            return null;
        }

        internal static SenderIdType? ParseSenderIdType(this string value)
        {
            switch( value )
            {
                case "N":
                    return SenderIdType.N;
                case "P":
                    return SenderIdType.P;
                case "R":
                    return SenderIdType.R;
                case "1":
                    return SenderIdType.One;
                case "2":
                    return SenderIdType.Two;
                case "3":
                    return SenderIdType.Three;
            }
            return null;
        }
    }
}
