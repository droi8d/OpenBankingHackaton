// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.PIS
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Klasa zawierająca informacje o PSU and callback URL / PSU and callback
    /// URL Information Class
    /// </summary>
    public partial class RequestHeaderCallback
    {
        /// <summary>
        /// Initializes a new instance of the RequestHeaderCallback class.
        /// </summary>
        public RequestHeaderCallback()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RequestHeaderCallback class.
        /// </summary>
        /// <param name="token">Token autoryzacyjny / Authorization
        /// token</param>
        /// <param name="requestId">Identyfikator żądania / Request ID</param>
        /// <param name="userAgent">Browser agent dla PSU / PSU browser
        /// agent</param>
        /// <param name="ipAddress">IP adres / IP address</param>
        /// <param name="sendDate">Oryginalna data wysłania, format:
        /// 2017-11-24T14:13:05.424Z / Send date</param>
        /// <param name="tppId">Identyfikator TPP / TPP ID</param>
        /// <param name="callbackURL">adres funkcji zwrotnej / callback
        /// URL</param>
        /// <param name="apiKey">API key dla wywołania funkcji zwrotnej /
        /// callback API key</param>
        public RequestHeaderCallback(string token, string requestId = default(string), string userAgent = default(string), string ipAddress = default(string), string sendDate = default(string), string tppId = default(string), string callbackURL = default(string), string apiKey = default(string))
        {
            RequestId = requestId;
            UserAgent = userAgent;
            IpAddress = ipAddress;
            SendDate = sendDate;
            TppId = tppId;
            Token = token;
            CallbackURL = callbackURL;
            ApiKey = apiKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets identyfikator żądania / Request ID
        /// </summary>
        [JsonProperty(PropertyName = "requestId")]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or sets browser agent dla PSU / PSU browser agent
        /// </summary>
        [JsonProperty(PropertyName = "userAgent")]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or sets IP adres / IP address
        /// </summary>
        [JsonProperty(PropertyName = "ipAddress")]
        public string IpAddress { get; set; }

        /// <summary>
        /// Gets or sets oryginalna data wysłania, format:
        /// 2017-11-24T14:13:05.424Z / Send date
        /// </summary>
        [JsonProperty(PropertyName = "sendDate")]
        public string SendDate { get; set; }

        /// <summary>
        /// Gets or sets identyfikator TPP / TPP ID
        /// </summary>
        [JsonProperty(PropertyName = "tppId")]
        public string TppId { get; set; }

        /// <summary>
        /// Gets or sets token autoryzacyjny / Authorization token
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets adres funkcji zwrotnej / callback URL
        /// </summary>
        [JsonProperty(PropertyName = "callbackURL")]
        public string CallbackURL { get; set; }

        /// <summary>
        /// Gets or sets API key dla wywołania funkcji zwrotnej / callback API
        /// key
        /// </summary>
        [JsonProperty(PropertyName = "apiKey")]
        public string ApiKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Token == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Token");
            }
        }
    }
}
