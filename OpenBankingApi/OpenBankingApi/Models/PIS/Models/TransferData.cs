// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.PIS
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Klasa zawierająca dane przelewu / Transfer Data Class
    /// </summary>
    public partial class TransferData
    {
        /// <summary>
        /// Initializes a new instance of the TransferData class.
        /// </summary>
        public TransferData()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TransferData class.
        /// </summary>
        /// <param name="description">Pole opisujące przelew /
        /// Description</param>
        /// <param name="amount">Kwota przelewu / Amount</param>
        /// <param name="currency">Waluta / Currency</param>
        public TransferData(string description, string amount, string currency = default(string))
        {
            Description = description;
            Amount = amount;
            Currency = currency;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets pole opisujące przelew / Description
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets kwota przelewu / Amount
        /// </summary>
        [JsonProperty(PropertyName = "amount")]
        public string Amount { get; set; }

        /// <summary>
        /// Gets or sets waluta / Currency
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Description == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Description");
            }
            if (Amount == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Amount");
            }
            if (Description != null)
            {
                if (Description.Length > 140)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Description", 140);
                }
            }
            if (Amount != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Amount, "^\\d*\\.\\d{2}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Amount", "^\\d*\\.\\d{2}$");
                }
            }
            if (Currency != null)
            {
                if (Currency.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Currency", 3);
                }
            }
        }
    }
}
