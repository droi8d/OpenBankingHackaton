// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Api.Models.PIS
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Klasa zlecenia przelewu zagranicznego innego niż SEPA / NonEEA Transfer
    /// Request Class
    /// </summary>
    public partial class PaymentNonEEARequest
    {
        /// <summary>
        /// Initializes a new instance of the PaymentNonEEARequest class.
        /// </summary>
        public PaymentNonEEARequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PaymentNonEEARequest class.
        /// </summary>
        /// <param name="tppTransactionId">ID transakcji nadany przez TPP /
        /// Transaction ID (TPP)</param>
        /// <param name="deliveryMode">Tryb pilności / Urgency mode. Possible
        /// values include: 'ExpressD0', 'UrgentD1', 'StandardD2'</param>
        /// <param name="transferCharges">Klauzula kosztowa / The cost
        /// clause</param>
        /// <param name="system">Droga jaką przelew ma być rozliczony / The way
        /// the transfer should be settled. Possible values include:
        /// 'Swift'</param>
        /// <param name="hold">Czy założyć blokadę (w przypadku np. zlecenia
        /// przelewu w dniu wolnym) / Indicates if payment should be
        /// holded</param>
        public PaymentNonEEARequest(RequestHeaderCallback requestHeader, RecipientPISForeign recipient, Bank recipientBank, SenderPIS sender, TransferDataCurrencyRequired transferData, string tppTransactionId, string deliveryMode, string transferCharges = default(string), string system = default(string), bool? hold = default(bool?))
        {
            RequestHeader = requestHeader;
            Recipient = recipient;
            RecipientBank = recipientBank;
            Sender = sender;
            TransferData = transferData;
            TransferCharges = transferCharges;
            TppTransactionId = tppTransactionId;
            DeliveryMode = deliveryMode;
            System = system;
            Hold = hold;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "requestHeader")]
        public RequestHeaderCallback RequestHeader { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recipient")]
        public RecipientPISForeign Recipient { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "recipientBank")]
        public Bank RecipientBank { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sender")]
        public SenderPIS Sender { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "transferData")]
        public TransferDataCurrencyRequired TransferData { get; set; }

        /// <summary>
        /// Gets or sets klauzula kosztowa / The cost clause
        /// </summary>
        [JsonProperty(PropertyName = "transferCharges")]
        public string TransferCharges { get; set; }

        /// <summary>
        /// Gets or sets ID transakcji nadany przez TPP / Transaction ID (TPP)
        /// </summary>
        [JsonProperty(PropertyName = "tppTransactionId")]
        public string TppTransactionId { get; set; }

        /// <summary>
        /// Gets or sets tryb pilności / Urgency mode. Possible values include:
        /// 'ExpressD0', 'UrgentD1', 'StandardD2'
        /// </summary>
        [JsonProperty(PropertyName = "deliveryMode")]
        public string DeliveryMode { get; set; }

        /// <summary>
        /// Gets or sets droga jaką przelew ma być rozliczony / The way the
        /// transfer should be settled. Possible values include: 'Swift'
        /// </summary>
        [JsonProperty(PropertyName = "system")]
        public string System { get; set; }

        /// <summary>
        /// Gets or sets czy założyć blokadę (w przypadku np. zlecenia przelewu
        /// w dniu wolnym) / Indicates if payment should be holded
        /// </summary>
        [JsonProperty(PropertyName = "hold")]
        public bool? Hold { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RequestHeader == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RequestHeader");
            }
            if (Recipient == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Recipient");
            }
            if (RecipientBank == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RecipientBank");
            }
            if (Sender == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Sender");
            }
            if (TransferData == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TransferData");
            }
            if (TppTransactionId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TppTransactionId");
            }
            if (DeliveryMode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DeliveryMode");
            }
            if (RequestHeader != null)
            {
                RequestHeader.Validate();
            }
            if (Recipient != null)
            {
                Recipient.Validate();
            }
            if (RecipientBank != null)
            {
                RecipientBank.Validate();
            }
            if (Sender != null)
            {
                Sender.Validate();
            }
            if (TransferData != null)
            {
                TransferData.Validate();
            }
            if (TransferCharges != null)
            {
                if (TransferCharges.Length > 3)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TransferCharges", 3);
                }
            }
            if (TppTransactionId != null)
            {
                if (TppTransactionId.Length > 64)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TppTransactionId", 64);
                }
            }
        }
    }
}
